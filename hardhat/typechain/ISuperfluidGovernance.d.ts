/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISuperfluidGovernanceInterface extends ethers.utils.Interface {
  functions: {
    "batchUpdateSuperTokenLogic(address,address[])": FunctionFragment;
    "getConfigAsAddress(address,address,bytes32)": FunctionFragment;
    "getConfigAsUint256(address,address,bytes32)": FunctionFragment;
    "registerAgreementClass(address,address)": FunctionFragment;
    "replaceGovernance(address,address)": FunctionFragment;
    "updateContracts(address,address,address[],address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchUpdateSuperTokenLogic",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigAsAddress",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigAsUint256",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAgreementClass",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceGovernance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContracts",
    values: [string, string, string[], string]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchUpdateSuperTokenLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfigAsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfigAsUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAgreementClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContracts",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISuperfluidGovernance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISuperfluidGovernanceInterface;

  functions: {
    batchUpdateSuperTokenLogic(
      host: string,
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getConfigAsAddress(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    getConfigAsUint256(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    registerAgreementClass(
      host: string,
      agreementClass: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replaceGovernance(
      host: string,
      newGov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateContracts(
      host: string,
      hostNewLogic: string,
      agreementClassNewLogics: string[],
      superTokenFactoryNewLogic: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  batchUpdateSuperTokenLogic(
    host: string,
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getConfigAsAddress(
    host: string,
    superToken: string,
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getConfigAsUint256(
    host: string,
    superToken: string,
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerAgreementClass(
    host: string,
    agreementClass: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replaceGovernance(
    host: string,
    newGov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateContracts(
    host: string,
    hostNewLogic: string,
    agreementClassNewLogics: string[],
    superTokenFactoryNewLogic: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchUpdateSuperTokenLogic(
      host: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getConfigAsAddress(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getConfigAsUint256(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAgreementClass(
      host: string,
      agreementClass: string,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceGovernance(
      host: string,
      newGov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateContracts(
      host: string,
      hostNewLogic: string,
      agreementClassNewLogics: string[],
      superTokenFactoryNewLogic: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    batchUpdateSuperTokenLogic(
      host: string,
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getConfigAsAddress(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfigAsUint256(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAgreementClass(
      host: string,
      agreementClass: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replaceGovernance(
      host: string,
      newGov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateContracts(
      host: string,
      hostNewLogic: string,
      agreementClassNewLogics: string[],
      superTokenFactoryNewLogic: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchUpdateSuperTokenLogic(
      host: string,
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getConfigAsAddress(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfigAsUint256(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAgreementClass(
      host: string,
      agreementClass: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replaceGovernance(
      host: string,
      newGov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateContracts(
      host: string,
      hostNewLogic: string,
      agreementClassNewLogics: string[],
      superTokenFactoryNewLogic: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
